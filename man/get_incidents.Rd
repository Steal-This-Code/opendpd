% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_incidents.R
\name{get_incidents}
\alias{get_incidents}
\title{Fetch Dallas Police Incident Data}
\usage{
get_incidents(
  start_date = NULL,
  end_date = NULL,
  nibrs_group = NULL,
  nibrs_code = NULL,
  nibrs_crime_against = NULL,
  zip_code = NULL,
  beat = NULL,
  division = NULL,
  sector = NULL,
  district = NULL,
  convert_geo = FALSE,
  limit = 1000,
  select = NULL,
  where = NULL,
  ...
)
}
\arguments{
\item{start_date}{Optional. A character string in 'YYYY-MM-DD' format or a
Date object specifying the minimum incident date (inclusive, based on `date1` field).}

\item{end_date}{Optional. A character string in 'YYYY-MM-DD' format or a
Date object specifying the maximum incident date (inclusive, based on `date1` field).}

\item{nibrs_group}{Optional. A character vector of NIBRS Group codes (e.g., 'A', 'B')
to filter incidents.}

\item{nibrs_code}{Optional. A character vector of specific NIBRS offense codes
(e.g., '13A', '23F') to filter incidents.}

\item{nibrs_crime_against}{Optional. A character vector specifying the NIBRS
'Crime Against' category (e.g., 'PERSON', 'PROPERTY', 'SOCIETY'). Filters
on the API field `nibrs_crimeagainst`.}

\item{zip_code}{Optional. A character or numeric vector of Zip Code(s) to filter incidents.}

\item{beat}{Optional. A character or numeric vector of Police Beat(s) to filter incidents.}

\item{division}{Optional. A character vector of Police Division names (e.g., 'CENTRAL',
'NORTHWEST') to filter incidents.}

\item{sector}{Optional. A character or numeric vector of Police Sector(s) to filter incidents.}

\item{district}{Optional. A character vector of Police District names (e.g., 'SOUTHEAST', 'NORTH CENTRAL')
to filter incidents.}

\item{convert_geo}{Logical. If `TRUE`, attempt to convert the data frame to an
`sf` object using `x_coordinate` and `y_cordinate`. Requires the `sf`
package to be installed. Defaults to `FALSE`. Assumes coordinates are in
NAD83 Texas North Central (ftUS) (EPSG:2276).}

\item{limit}{The maximum number of records to return. Defaults to 1000.
Use `limit = Inf` to attempt retrieving all matching records.}

\item{select}{A character vector specifying which columns to retrieve.
If `convert_geo = TRUE`, ensure `x_coordinate` and `y_cordinate` are included
or conversion will fail. If NULL (default), all columns are retrieved.}

\item{where}{An optional character string containing a custom SoQL WHERE clause.
Overrides other filter arguments if provided.}

\item{...}{Additional SODA query parameters passed directly to the API URL,
(e.g., `$order = "date1 DESC"`).}
}
\value{
A `tibble` by default. If `convert_geo = TRUE` and the `sf` package
  is installed and coordinates are valid, returns an `sf` object with point geometry
  using CRS EPSG:2276. Otherwise, returns a `tibble` with a warning if conversion failed.
}
\description{
This function queries the Socrata Open Data API (SODA) for Dallas Police
Incidents. It allows filtering by date range, NIBRS crime classifications,
geographic areas (zip, beat, division, sector, district) and supports
retrieving large datasets through automatic pagination.

If the `where` argument is provided, it overrides all other filter arguments.

If `convert_geo = TRUE`, the function attempts to convert the resulting
tibble into a spatial `sf` object using the `x_coordinate` and `y_cordinate`
columns, assuming they are in the NAD83 Texas North Central (ftUS) coordinate
system (EPSG:2276). Requires the `sf` package to be installed.
}
\details{
Retrieves incident data from the Dallas Open Data portal API
(SODA endpoint qv6i-rri7). Optionally converts coordinates to a geographic object.
}
\examples{
\dontrun{
# Get recent data as a standard tibble
recent_tibble <- get_incidents(limit = 10, `$order` = "date1 DESC")
print(class(recent_tibble))

# Get recent data as an sf object (requires the sf package)
# install.packages("sf")
recent_sf <- get_incidents(limit = 10, `$order` = "date1 DESC", convert_geo = TRUE) # Changed here
print(class(recent_sf))
if (inherits(recent_sf, "sf")) {
  print(sf::st_crs(recent_sf)) # Check CRS - should show EPSG 2276
  # Plotting might require transformation depending on the base map context
  # Simple plot of the geometry:
  # plot(sf::st_geometry(recent_sf))

  # Example transformation to WGS84 (Lat/Lon) for use with leaflet, etc.
  # recent_sf_wgs84 <- sf::st_transform(recent_sf, crs = 4326)
  # print(sf::st_crs(recent_sf_wgs84))
}

# Filter and get as sf object
central_burglaries_sf <- get_incidents(
   division = "CENTRAL",
   nibrs_code = "220", # Check code for Burglary/B&E
   start_date = "2024-03-01",
   end_date = "2024-03-31",
   convert_geo = TRUE, # Changed here
   limit = 50
)
if (inherits(central_burglaries_sf, "sf")) {
   print(central_burglaries_sf)
}

# Using select - make sure to include coordinates if converting!
selected_sf <- get_incidents(
   limit = 5,
   select = c("date1", "nibrs_code", "x_coordinate", "y_cordinate"),
   convert_geo = TRUE # Changed here
)
print(selected_sf)
}
}
